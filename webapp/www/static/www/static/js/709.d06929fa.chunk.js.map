{"version":3,"file":"static/js/709.d06929fa.chunk.js","mappings":"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","sources":["App/NotFound/index.tsx","App/Prodotto/Widget.tsx","App/Servizio/Servizi.tsx","App/Servizio/Prodotti.tsx","App/Servizio/index.tsx","features/prodotti/list.ts","../../../node_modules/@mui/system/esm/Container/Container.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button, Typography } from \"@mui/material\";\r\nimport { Container, Box } from \"@mui/system\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Page } from \"Components\";\r\n\r\nconst NotFound: React.FC = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Page>\r\n      <Container>\r\n        <Box sx={{ textAlign: \"center\" }}>\r\n          <img\r\n            alt=\"pagina non trovata\"\r\n            src={process.env.PUBLIC_URL + \"/static/animations/not-found.gif\"}\r\n            style={{ maxWidth: \"100%\" }}\r\n            width={450}\r\n            height=\"auto\"\r\n          />\r\n          <Typography variant=\"h6\">Qui non c'è niente!</Typography>\r\n          <Typography gutterBottom>\r\n            La pagina che stavi cercando non esiste!\r\n          </Typography>\r\n          <Button variant=\"contained\" onClick={() => navigate(-1)}>\r\n            Torna indietro\r\n          </Button>\r\n        </Box>\r\n      </Container>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport {\r\n  ButtonBase,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Box,\r\n  CardMedia,\r\n} from \"@mui/material\";\r\nimport { find } from \"lodash\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Prodotto } from \"models\";\r\n\r\ninterface Props {\r\n  prodotto: Prodotto;\r\n}\r\n\r\nconst ProdottoWidget: React.FC<Props> = ({ prodotto }) => {\r\n  const navigate = useNavigate();\r\n\r\n  let thumbnail = null;\r\n  if (prodotto.immagini) {\r\n    if (prodotto.immagini.length > 0) {\r\n      thumbnail = find(prodotto.immagini, (i) => i.thumbnail === true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card sx={{ display: \"flex\", backgroundColor: \"#FFFFFF\" }}>\r\n      <ButtonBase\r\n        sx={{ width: \"100% !important\" }}\r\n        onClick={\r\n          prodotto.url\r\n            ? () => navigate(\"/prodotto/\" + prodotto.url)\r\n            : () => navigate(\"#\")\r\n        }\r\n      >\r\n        <Box sx={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          <CardContent\r\n            sx={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              flexDirection: \"column\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <Typography>\r\n              <b>{prodotto.nome}</b>\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              {prodotto.prezzo\r\n                ? prodotto.prezzo + \" €\"\r\n                : \"prezzo non specificato\"}\r\n            </Typography>\r\n            <Typography variant=\"caption\">\r\n              {prodotto.descrizione_breve}\r\n            </Typography>\r\n          </CardContent>\r\n\r\n          {thumbnail && (\r\n            <CardMedia\r\n              sx={{ width: 150 }}\r\n              component=\"img\"\r\n              image={thumbnail.file}\r\n            />\r\n          )}\r\n        </Box>\r\n      </ButtonBase>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProdottoWidget;\r\n","import { Box, Grid, Typography } from \"@mui/material\";\r\nimport ProdottoWidget from \"App/Prodotto/Widget\";\r\nimport { useAppSelector } from \"hooks\";\r\nimport { filter } from \"lodash\";\r\nimport React from \"react\";\r\n\r\nconst Servizi: React.FC = () => {\r\n  const { list } = useAppSelector((state) => state.prodotti);\r\n  const prodotti = filter(list, (pr) => pr.servizio === true);\r\n\r\n  if (list.length === 0) {\r\n    return null;\r\n  } else {\r\n    if (prodotti.length === 0) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <Box sx={{ textAlign: \"center\" }}>\r\n          <Typography variant=\"h6\" sx={{ mb: 6 }}>\r\n            Cosa Facciamo\r\n          </Typography>\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={3}\r\n          >\r\n            {prodotti.map((pr, i) => {\r\n              return (\r\n                <Grid key={i} item xs={12} sm={6} lg={4}>\r\n                  <ProdottoWidget prodotto={pr} />\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Box>\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport default Servizi;\r\n","import { Box, Grid, Typography } from \"@mui/material\";\r\nimport ProdottoWidget from \"App/Prodotto/Widget\";\r\nimport { useAppSelector } from \"hooks\";\r\nimport { filter } from \"lodash\";\r\nimport React from \"react\";\r\n\r\nconst Prodotti: React.FC = () => {\r\n  const { list } = useAppSelector((state) => state.prodotti);\r\n  const prodotti = filter(\r\n    list,\r\n    (pr) => pr.servizio === false && pr.resourcetype === \"Prodotto\"\r\n  );\r\n\r\n  if (list.length === 0) {\r\n    return null;\r\n  } else {\r\n    if (prodotti.length === 0) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <Box sx={{ textAlign: \"center\" }}>\r\n          <Typography variant=\"h6\" sx={{ mb: 6 }}>\r\n            Cosa Vendiamo\r\n          </Typography>\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={3}\r\n          >\r\n            {prodotti.map((pr, i) => {\r\n              return (\r\n                <Grid key={i} item xs={12} sm={6} lg={4}>\r\n                  <ProdottoWidget prodotto={pr} />\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Box>\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport default Prodotti;\r\n","import React from \"react\";\r\nimport { isEmpty, find } from \"lodash\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useAppDispatch, useAppSelector } from \"hooks\";\r\nimport list from \"features/prodotti/list\";\r\nimport {\r\n  ErrorScreen,\r\n  Header,\r\n  LoadingScreen,\r\n  Jumbotron,\r\n  Page,\r\n} from \"Components\";\r\nimport NotFound from \"App/NotFound\";\r\nimport Servizi from \"./Servizi\";\r\nimport Prodotti from \"./Prodotti\";\r\n\r\nconst Servizio: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { servizio } = useParams();\r\n  const categorie = useAppSelector((state) => state.categorie);\r\n  const prodotti = useAppSelector((state) => state.prodotti);\r\n\r\n  React.useEffect(() => {\r\n    let categoria = find(categorie.list, function (o) {\r\n      return o.url === servizio;\r\n    });\r\n\r\n    if (!isEmpty(categoria)) {\r\n      dispatch(list({ categoria: categoria?.id, sito: \"true\" }));\r\n    }\r\n  }, [servizio, categorie, dispatch]);\r\n\r\n  if (categorie.listing && prodotti.getting) {\r\n    return <LoadingScreen />;\r\n  } else {\r\n    if (categorie.listError) {\r\n      return (\r\n        <ErrorScreen>\r\n          Impossibile recuperare il servizio richiesto! Riprova più tardi\r\n        </ErrorScreen>\r\n      );\r\n    } else {\r\n      if (!Array.isArray(categorie.list)) {\r\n        return <ErrorScreen>C'è stato un problema...</ErrorScreen>;\r\n      } else {\r\n        if (isEmpty(categorie.list)) {\r\n          return <ErrorScreen>C'è stato un problema...</ErrorScreen>;\r\n        } else {\r\n          let categoria = find(categorie.list, function (o) {\r\n            return o.url === servizio;\r\n          });\r\n\r\n          if (categoria === undefined) {\r\n            return <NotFound />;\r\n          } else {\r\n            const Wallpaper = () => {\r\n              if (categoria?.wallpaper) {\r\n                return <Jumbotron image={categoria?.wallpaper} />;\r\n              } else {\r\n                return null;\r\n              }\r\n            };\r\n\r\n            return (\r\n              <Page>\r\n                <Header>\r\n                  <Typography variant=\"h2\" component=\"h1\" gutterBottom>\r\n                    {categoria.nome}\r\n                  </Typography>\r\n\r\n                  <Typography variant=\"subtitle1\">\r\n                    {categoria.descrizione_breve}\r\n                  </Typography>\r\n                </Header>\r\n\r\n                <Wallpaper />\r\n\r\n                <Servizi />\r\n                <Prodotti />\r\n              </Page>\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default Servizio;\r\n","import api, { Endpoints } from \"api\";\r\nimport { AppThunk } from \"store\";\r\nimport { listFail, listSuccess } from \"./slice\";\r\n\r\nexport default function list(q: {} = {}): AppThunk {\r\n  return async (dispatch) => {\r\n    let endpoint = `${Endpoints.PRODOTTI}?`;\r\n    let newQuery: string[] = [];\r\n\r\n    for (const [key, value] of Object.entries(q)) {\r\n      newQuery.push(`${key}=${value}`);\r\n    }\r\n\r\n    const queryAsString = newQuery.join(\"&\");\r\n\r\n    api\r\n      .get(`${endpoint}${queryAsString}`)\r\n      .then((response) => {\r\n        dispatch(listSuccess(response.data));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(listFail());\r\n      });\r\n  };\r\n}\r\n","import PropTypes from 'prop-types';\nimport createContainer from './createContainer';\n/**\n *\n * Demos:\n *\n * - [Container (Material UI)](https://mui.com/material-ui/react-container/)\n * - [Container (MUI System)](https://mui.com/system/react-container/)\n *\n * API:\n *\n * - [Container API](https://mui.com/system/api/container/)\n */\n\nconst Container = createContainer();\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;"],"names":["navigate","useNavigate","sx","textAlign","alt","src","process","style","maxWidth","width","height","variant","gutterBottom","onClick","prodotto","thumbnail","immagini","length","find","i","display","backgroundColor","url","flexDirection","justifyContent","nome","prezzo","descrizione_breve","component","image","file","list","useAppSelector","state","prodotti","filter","pr","servizio","Box","Typography","mb","Grid","container","direction","alignItems","spacing","map","item","xs","sm","lg","resourcetype","dispatch","useAppDispatch","useParams","categorie","React","categoria","o","isEmpty","id","sito","listing","getting","listError","Array","isArray","undefined","NotFound","Wallpaper","wallpaper","q","endpoint","Endpoints","newQuery","Object","entries","key","value","push","queryAsString","join","api","then","response","listSuccess","data","catch","error","listFail","Container","createContainer"],"sourceRoot":""}