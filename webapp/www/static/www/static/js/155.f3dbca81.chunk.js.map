{"version":3,"file":"static/js/155.f3dbca81.chunk.js","mappings":"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","sources":["App/Contatti/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { filter, isEmpty, forEach } from \"lodash\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Link,\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Alert,\r\n  FormControlLabel,\r\n  Checkbox,\r\n} from \"@mui/material\";\r\nimport { IconSend } from \"@tabler/icons\";\r\nimport api from \"api\";\r\n\r\nconst Contatti: React.FC = () => {\r\n  const [formError, setFormError] = React.useState(true);\r\n  const [response, setRespose] = React.useState({\r\n    status: \"\",\r\n    statusText: \"\",\r\n  });\r\n  const [values, setValues] = React.useState({\r\n    email: {\r\n      value: \"\",\r\n      error: true,\r\n    },\r\n    messaggio: {\r\n      value: \"\",\r\n      error: true,\r\n    },\r\n    privacy: {\r\n      value: false,\r\n      error: true,\r\n    },\r\n  });\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    setValues({\r\n      ...values,\r\n      [name]: {\r\n        value: value,\r\n        error: value === \"\" || value === null ? true : false,\r\n      },\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const errorFormObj = filter(values, [\"error\", true]);\r\n\r\n    setFormError(!isEmpty(errorFormObj));\r\n  }, [values]);\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const obj: { [key: string]: string | boolean } = {};\r\n\r\n    forEach(values, (o, k): void => {\r\n      obj[k] = o.value;\r\n    });\r\n\r\n    api\r\n      .post(\"/contatti/\", obj)\r\n      .then((response) => {\r\n        setRespose({\r\n          status: response.status.toString(),\r\n          statusText: response.statusText,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          setRespose({\r\n            status: error.response.status,\r\n            statusText: \"Impossibile inviare l'email\",\r\n          });\r\n        } else if (error.request) {\r\n          console.log(\"request\");\r\n          console.log(error.request);\r\n        } else {\r\n          console.log(\"else\");\r\n          console.log(\"Error\", error.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handlePrivacyChange = function (e: any) {\r\n    setValues({\r\n      ...values,\r\n      privacy: {\r\n        ...values.privacy,\r\n        value: !values.privacy.value,\r\n        error: !values.privacy.value === false ? true : false,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        sx={{\r\n          backgroundImage: `url(${\r\n            process.env.PUBLIC_URL + \"/static/wallpapers/mood.jpg\"\r\n          })`,\r\n          backgroundPosition: \"center center\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            pt: 6,\r\n            pb: 6,\r\n          }}\r\n        >\r\n          <Container maxWidth=\"sm\">\r\n            <Paper sx={{ p: 2, textAlign: \"center\", mb: 6 }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Chiamaci\r\n              </Typography>\r\n              <Link href=\"tel:+390302122560\">030 21 22 560</Link>\r\n              <Typography variant=\"body2\">oppure</Typography>\r\n              <Link href=\"tel:+393277331510\">Whatsapp: 327 733 1510</Link>\r\n            </Paper>\r\n          </Container>\r\n\r\n          <Container maxWidth=\"sm\">\r\n            <Paper sx={{ p: 2, textAlign: \"center\" }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Scrivici\r\n              </Typography>\r\n              <form onSubmit={handleSubmit}>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  helperText=\"scrivi la tua email\"\r\n                  margin=\"normal\"\r\n                  value={values.email.value}\r\n                  error={values.email.error}\r\n                  onChange={handleChange}\r\n                  required\r\n                  inputProps={{\r\n                    inputMode: \"email\",\r\n                    type: \"email\",\r\n                  }}\r\n                />\r\n\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"messaggio\"\r\n                  name=\"messaggio\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"scrivi il tuo messaggio\"\r\n                  value={values.messaggio.value}\r\n                  error={values.messaggio.error}\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  multiline\r\n                  required\r\n                  margin=\"normal\"\r\n                />\r\n\r\n                <Box sx={{ mb: 3 }}>\r\n                  <Typography variant=\"overline\">Privacy</Typography>\r\n                  <Typography variant=\"body2\" gutterBottom>\r\n                    Accetto di condividere con La Rapida di Davide Di Criscito\r\n                    il mio indirizzo email e comprendo che l'email non verr√†\r\n                    utilizzata per altri scopi che non siano quello di essere\r\n                    ricontattato.\r\n                  </Typography>\r\n\r\n                  <FormControlLabel\r\n                    label=\"Ho compreso\"\r\n                    onChange={handlePrivacyChange}\r\n                    control={\r\n                      <Checkbox\r\n                        checked={values.privacy.value}\r\n                        value={values.privacy.value}\r\n                        required\r\n                      />\r\n                    }\r\n                  />\r\n                </Box>\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  endIcon={<IconSend />}\r\n                  disabled={formError}\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Invia\r\n                </Button>\r\n              </form>\r\n\r\n              {response.status && (\r\n                <Alert\r\n                  sx={{ mt: 3 }}\r\n                  severity={+response.status === 200 ? \"success\" : \"error\"}\r\n                >\r\n                  {response.statusText}\r\n                </Alert>\r\n              )}\r\n            </Paper>\r\n          </Container>\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Contatti;\r\n"],"names":["React","formError","setFormError","status","statusText","response","setRespose","email","value","error","messaggio","privacy","values","setValues","handleChange","e","target","name","errorFormObj","filter","isEmpty","handleSubmit","preventDefault","obj","forEach","o","k","api","then","toString","catch","request","console","log","message","sx","backgroundImage","process","backgroundPosition","pt","pb","maxWidth","p","textAlign","mb","variant","gutterBottom","href","onSubmit","id","label","type","fullWidth","helperText","margin","onChange","required","inputProps","inputMode","multiline","control","checked","endIcon","disabled","onClick","mt","severity"],"sourceRoot":""}