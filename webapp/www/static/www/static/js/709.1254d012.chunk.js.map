{"version":3,"file":"static/js/709.1254d012.chunk.js","mappings":"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","sources":["App/NotFound/index.tsx","App/Prodotto/Widget.tsx","App/Servizio/Servizi.tsx","App/Servizio/Prodotti.tsx","App/Servizio/index.tsx","features/prodotti/list.ts"],"sourcesContent":["import React from \"react\";\nimport { Button, Typography } from \"@mui/material\";\nimport { Container, Box } from \"@mui/system\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Page } from \"Components\";\n\nconst NotFound: React.FC = () => {\n  const navigate = useNavigate();\n\n  return (\n    <Page>\n      <Container>\n        <Box sx={{ textAlign: \"center\" }}>\n          <img\n            alt=\"pagina non trovata\"\n            src={process.env.PUBLIC_URL + \"/static/animations/not-found.gif\"}\n            style={{ maxWidth: \"100%\" }}\n            width={450}\n            height=\"auto\"\n          />\n          <Typography variant=\"h6\">Qui non c'è niente!</Typography>\n          <Typography gutterBottom>\n            La pagina che stavi cercando non esiste!\n          </Typography>\n          <Button variant=\"contained\" onClick={() => navigate(-1)}>\n            Torna indietro\n          </Button>\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport {\n  ButtonBase,\n  Card,\n  CardContent,\n  Typography,\n  Box,\n  CardMedia,\n} from \"@mui/material\";\nimport { find } from \"lodash\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Prodotto } from \"models\";\n\ninterface Props {\n  prodotto: Prodotto;\n}\n\nconst ProdottoWidget: React.FC<Props> = ({ prodotto }) => {\n  const navigate = useNavigate();\n\n  let thumbnail = null;\n  if (prodotto.immagini) {\n    if (prodotto.immagini.length > 0) {\n      thumbnail = find(prodotto.immagini, (i) => i.thumbnail === true);\n    }\n  }\n\n  return (\n    <Card sx={{ display: \"flex\", backgroundColor: \"#FFFFFF\" }}>\n      <ButtonBase\n        sx={{ width: \"100% !important\" }}\n        onClick={\n          prodotto.url\n            ? () => navigate(\"/prodotto/\" + prodotto.url)\n            : () => navigate(\"#\")\n        }\n      >\n        <Box sx={{ display: \"flex\", flexDirection: \"row\" }}>\n          <CardContent\n            sx={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n              width: \"100%\",\n            }}\n          >\n            <Typography>\n              <b>{prodotto.nome}</b>\n            </Typography>\n            <Typography variant=\"body2\">\n              {prodotto.prezzo\n                ? prodotto.prezzo + \" €\"\n                : \"prezzo non specificato\"}\n            </Typography>\n            <Typography variant=\"caption\">\n              {prodotto.descrizione_breve}\n            </Typography>\n          </CardContent>\n\n          {thumbnail && (\n            <CardMedia\n              sx={{ width: 150 }}\n              component=\"img\"\n              image={thumbnail.file}\n            />\n          )}\n        </Box>\n      </ButtonBase>\n    </Card>\n  );\n};\n\nexport default ProdottoWidget;\n","import { Box, Grid, Typography } from \"@mui/material\";\nimport ProdottoWidget from \"App/Prodotto/Widget\";\nimport { useAppSelector } from \"hooks\";\nimport { filter } from \"lodash\";\nimport React from \"react\";\n\nconst Servizi: React.FC = () => {\n  const { list } = useAppSelector((state) => state.prodotti);\n  const prodotti = filter(list, (pr) => pr.servizio === true);\n\n  if (list.length === 0) {\n    return null;\n  } else {\n    if (prodotti.length === 0) {\n      return null;\n    } else {\n      return (\n        <Box sx={{ textAlign: \"center\" }}>\n          <Typography variant=\"h6\" sx={{ mb: 6 }}>\n            Cosa Facciamo\n          </Typography>\n\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            spacing={3}\n          >\n            {prodotti.map((pr, i) => {\n              return (\n                <Grid key={i} item xs={12} sm={6} lg={4}>\n                  <ProdottoWidget prodotto={pr} />\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Box>\n      );\n    }\n  }\n};\n\nexport default Servizi;\n","import { Box, Grid, Typography } from \"@mui/material\";\nimport ProdottoWidget from \"App/Prodotto/Widget\";\nimport { useAppSelector } from \"hooks\";\nimport { filter } from \"lodash\";\nimport React from \"react\";\n\nconst Prodotti: React.FC = () => {\n  const { list } = useAppSelector((state) => state.prodotti);\n  const prodotti = filter(\n    list,\n    (pr) => pr.servizio === false && pr.resourcetype === \"Prodotto\"\n  );\n\n  if (list.length === 0) {\n    return null;\n  } else {\n    if (prodotti.length === 0) {\n      return null;\n    } else {\n      return (\n        <Box sx={{ textAlign: \"center\" }}>\n          <Typography variant=\"h6\" sx={{ mb: 6 }}>\n            Cosa Vendiamo\n          </Typography>\n\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            spacing={3}\n          >\n            {prodotti.map((pr, i) => {\n              return (\n                <Grid key={i} item xs={12} sm={6} lg={4}>\n                  <ProdottoWidget prodotto={pr} />\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Box>\n      );\n    }\n  }\n};\n\nexport default Prodotti;\n","import React from \"react\";\r\nimport { isEmpty, find } from \"lodash\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Box, Container, Typography } from \"@mui/material\";\r\nimport { useAppDispatch, useAppSelector } from \"hooks\";\r\nimport list from \"features/prodotti/list\";\r\nimport {\r\n  ErrorScreen,\r\n  Header,\r\n  LoadingScreen,\r\n  Jumbotron,\r\n  Page,\r\n} from \"Components\";\r\nimport NotFound from \"App/NotFound\";\r\nimport Servizi from \"./Servizi\";\r\nimport Prodotti from \"./Prodotti\";\r\nimport { ReactMarkdown } from \"react-markdown/lib/react-markdown\";\r\n\r\nconst Servizio: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { servizio } = useParams();\r\n  const categorie = useAppSelector((state) => state.categorie);\r\n  const prodotti = useAppSelector((state) => state.prodotti);\r\n\r\n  React.useEffect(() => {\r\n    let categoria = find(categorie.list, function (o) {\r\n      return o.url === servizio;\r\n    });\r\n\r\n    if (!isEmpty(categoria)) {\r\n      dispatch(list({ categoria: categoria?.id, sito: \"true\" }));\r\n    }\r\n  }, [servizio, categorie, dispatch]);\r\n\r\n  if (categorie.listing && prodotti.getting) {\r\n    return <LoadingScreen />;\r\n  } else {\r\n    if (categorie.listError) {\r\n      return (\r\n        <ErrorScreen>\r\n          Impossibile recuperare il servizio richiesto! Riprova più tardi\r\n        </ErrorScreen>\r\n      );\r\n    } else {\r\n      if (!Array.isArray(categorie.list)) {\r\n        return <ErrorScreen>C'è stato un problema...</ErrorScreen>;\r\n      } else {\r\n        if (isEmpty(categorie.list)) {\r\n          return <ErrorScreen>C'è stato un problema...</ErrorScreen>;\r\n        } else {\r\n          let categoria = find(categorie.list, function (o) {\r\n            return o.url === servizio;\r\n          });\r\n\r\n          if (categoria === undefined) {\r\n            return <NotFound />;\r\n          } else {\r\n            const Wallpaper = () => {\r\n              if (categoria?.wallpaper) {\r\n                return <Jumbotron image={categoria?.wallpaper} />;\r\n              } else {\r\n                return null;\r\n              }\r\n            };\r\n\r\n            const Descrizione = () => {\r\n              if (categoria?.descrizione) {\r\n                return (\r\n                  <Container maxWidth=\"md\">\r\n                    <Box sx={{ mb: 3 }}>\r\n                      <ReactMarkdown>{categoria?.descrizione}</ReactMarkdown>\r\n                    </Box>\r\n                  </Container>\r\n                );\r\n              } else {\r\n                return null;\r\n              }\r\n            };\r\n\r\n            return (\r\n              <Page>\r\n                <Header>\r\n                  <Typography variant=\"h2\" component=\"h1\" gutterBottom>\r\n                    {categoria.nome}\r\n                  </Typography>\r\n\r\n                  <Typography variant=\"subtitle1\">\r\n                    {categoria.descrizione_breve}\r\n                  </Typography>\r\n                </Header>\r\n\r\n                <Wallpaper />\r\n\r\n                <Descrizione />\r\n\r\n                <Servizi />\r\n                <Prodotti />\r\n              </Page>\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default Servizio;\r\n","import api, { Endpoints } from \"api\";\nimport { AppThunk } from \"store\";\nimport { listFail, listSuccess } from \"./slice\";\n\nexport default function list(q: {} = {}): AppThunk {\n  return async (dispatch) => {\n    let endpoint = `${Endpoints.PRODOTTI}?`;\n    let newQuery: string[] = [];\n\n    for (const [key, value] of Object.entries(q)) {\n      newQuery.push(`${key}=${value}`);\n    }\n\n    const queryAsString = newQuery.join(\"&\");\n\n    api\n      .get(`${endpoint}${queryAsString}`)\n      .then((response) => {\n        dispatch(listSuccess(response.data));\n      })\n      .catch((error) => {\n        dispatch(listFail());\n      });\n  };\n}\n"],"names":["navigate","useNavigate","sx","textAlign","alt","src","style","maxWidth","width","height","variant","gutterBottom","onClick","prodotto","thumbnail","immagini","length","find","i","display","backgroundColor","url","flexDirection","justifyContent","nome","prezzo","descrizione_breve","component","image","file","list","useAppSelector","state","prodotti","filter","pr","servizio","Box","Typography","mb","Grid","container","direction","alignItems","spacing","map","item","xs","sm","lg","resourcetype","dispatch","useAppDispatch","useParams","categorie","React","categoria","o","isEmpty","id","sito","listing","getting","listError","Array","isArray","undefined","NotFound","Wallpaper","wallpaper","Descrizione","descrizione","Container","q","endpoint","Endpoints","newQuery","Object","entries","key","value","push","queryAsString","join","api","then","response","listSuccess","data","catch","error","listFail"],"sourceRoot":""}